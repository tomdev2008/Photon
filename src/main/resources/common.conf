akka {
	# Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
	# to STDOUT)
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	loglevel = "DEBUG" 
	log-dead-letters-during-shutdown = on
	log-config-on-start = on
	log-dead-letters = on
  actor 
  {
      serializers {
     	proto = "akka.remote.serialization.ProtobufSerializer"
      	hessian = "com.yhd.arch.photon.codec.HessianCodec"
      }
    
     serialization-bindings {
      # Since com.google.protobuf.Message does not extend Serializable but
      # GeneratedMessage does, need to use the more specific one here in order
      # to avoid ambiguity
      #"com.google.protobuf.GeneratedMessage" =proto 
      "com.yhd.arch.photon.invoker.DefaultRequest" = hessian
      "com.yhd.arch.photon.invoker.DefaultResponse" = hessian   
    }
    
   	 provider = "akka.remote.RemoteActorRefProvider"
  }
  remote
  {
 
	command-ack-timeout = 10 s
  	quarantine-systems-for = off
  	watch-failure-detector {
  	  acceptable-heartbeat-pause = 1 d
  	  threshold = 12
  	  min-std-deviation = 1000 ms
  	  heartbeat-interval = 5 s
  	  expected-response-after = 20 s
  	}
    netty.tcp {
      hostname = "127.0.0.1"
      maximum-frame-size = 2048000b
      transport-class = "akka.remote.transport.netty.NettyTransport"
      applied-adapters = []
 
      transport-protocol = tcp
      hostname = ""
 
      # Enables SSL support on this transport
      enable-ssl = false
 
      connection-timeout = 20s
 
      use-dispatcher-for-io = ""
 
      write-buffer-high-water-mark = 0b
 
      write-buffer-low-water-mark = 0b
 
      send-buffer-size = 32000b
 
      receive-buffer-size = 32000b
 
      backlog = 4096
 
      server-socket-worker-pool {
        # Min number of threads to cap factor-based number to
        pool-size-min = 4
 
        # The pool size factor is used to determine thread pool size
        # using the following formula: ceil(available processors * factor).
        # Resulting size is then bounded by the pool-size-min and
        # pool-size-max values.
        pool-size-factor = 1.0
 
        # Max number of threads to cap factor-based number to
        pool-size-max = 100
      }
 
      client-socket-worker-pool {
        # Min number of threads to cap factor-based number to
        pool-size-min = 4
 
        # The pool size factor is used to determine thread pool size
        # using the following formula: ceil(available processors * factor).
        # Resulting size is then bounded by the pool-size-min and
        # pool-size-max values.
        pool-size-factor = 1.0
 
        # Max number of threads to cap factor-based number to
        pool-size-max = 50
      }
    }
  }
  
}